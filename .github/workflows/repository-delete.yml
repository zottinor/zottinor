name: Repository Delete

on:
  issues:
    types: 
      [opened, edited]
  
jobs:
  delete-repository:
    # if: contains(github.event.issue.labels.*.name, 'repository-delete-request')
    # if: ${{ (contains(github.event.issue.labels.*.name, 'repository-delete-request')) && (github.repository == 'tetrapak-internal/github-guide') && (startsWith(github.event.issue.title, 'Repository delete request by ')) && (github.workflow == 'Repository Delete') && (startsWith(github.event.issue.body, '### Repository')) }}
    if: ${{ (contains(github.event.issue.labels.*.name, 'repository-delete-request')) && (github.repository == 'tetrapak-internal/github-guide') && (startsWith(github.event.issue.title, 'Repository delete request by ')) }}
    runs-on: ubuntu-latest
    steps:
      - name: Parse issue body
        id: parse_issue
        uses: actions/github-script@v6
        with:
          script: |
            const issuePattern = /###\s+Repository\s+(?<repository>[^\s]+)/;
            const { groups: {repository}} = context.payload.issue.body.match( issuePattern );
            return { repository }

      - name: Download ghtoken
        shell: bash
        run: |
          curl -o ghtoken                                                                           \
                -O -L -C  -                                                                         \
                https://raw.githubusercontent.com/Link-/gh-token/main/gh-token &&                   \
                echo "6a6b111355432e08dd60ac0da148e489cdb0323a059ee8cbe624fd37bf2572ae  ghtoken" |  \
                shasum -c - &&                                                                      \
                chmod u+x ./ghtoken
          echo 'Setup ghtoken completed successfully'

      - name: Delete Repository access token
        shell: bash
        id: delete-repository-token
        run: |
          DELETE_REPOSITORY_APP_TOKEN=$(./ghtoken generate                                          \
            --base64_key $(printf "%s" '${{ secrets.TETRA_PAK_GITHUB_AUTOMATION_APP_PRIVATE_KEY }}' | base64 -w 0) \
            --app_id '${{ secrets.TETRA_PAK_GITHUB_AUTOMATION_APP_ID }}'                                       \
            --install_jwt_cli                                                                       \
            --hostname 'api.github.com'                                                             \
            | jq -r ".token")
          echo "DELETE_REPOSITORY_APP_TOKEN=${DELETE_REPOSITORY_APP_TOKEN}" >> $GITHUB_OUTPUT
          echo 'Create secret maintenance access token completed successfully'

      - name: Delete Repository
        id: delete_repository
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          github-token: ${{ steps.delete-repository-token.outputs.DELETE_REPOSITORY_APP_TOKEN }}
          script: |
            const { repository } = JSON.parse('${{ steps.parse_issue.outputs.result }}');
            var result = "";
            console.log ( `Repository name provided: ${repository}` );
            try 
            {
              const repoPermission = await github.request(`GET /repos/${{ github.repository_owner }}/${repository}/collaborators/${{ github.actor }}/permission`);              
                if ( repoPermission.data.permission == "admin" )
                {       
                  const apiResult = await github.request(`DELETE /repos/${{ github.repository_owner }}/${repository}`);
                  console.log ( apiResult.status );
                  if(apiResult.status == 204)
                  {
                    result = `Repository ${repository} deleted.`;
                    github.rest.issues.createComment({
                      issue_number: context.payload.issue.number,
                      owner: "${{ github.repository_owner }}",
                      repo: "${{ github.event.repository.name }}",
                      body: `Repository ${repository} deleted.`,
                    });
                  }
                  else
                  {
                    result = `Repository ${repository} cannot be deleted due to error: apiResult.status`;
                    github.rest.issues.createComment({
                      issue_number: context.payload.issue.number,
                      owner: "${{ github.repository_owner }}",
                      repo: "${{ github.event.repository.name }}",
                      body: "Repository ${repository} cannot be deleted due to error: " + apiResult.status,
                    });
                  }
                }
                else
                {
                  github.rest.issues.createComment({
                      issue_number: context.payload.issue.number,
                      owner: "${{ github.repository_owner }}",
                      repo: "${{ github.event.repository.name }}",
                      body: `Repository ${repository} cannot be deleted as ${{ github.actor }} is not a repository administrator.`,
                    });
                  result = `Repository: ${repository} cannot be deleted as ${{ github.actor }} is not a repository administrator. \n`;
                }
            }
            catch (error)
            {
              core.setFailed(error.message);
              github.rest.issues.createComment({
                  issue_number: context.payload.issue.number,
                  owner: "${{ github.repository_owner }}",
                  repo: "${{ github.event.repository.name }}",
                  body: `Repository ${repository} cannot be deleted due to error: ${error.message}`,
                });
              result = result + `Repository: ${repository} cannot be deleted due to error: ${error.message} \n`;
              console.log ( result );
            }

            return { result };
           
      - name: Close issue
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const { result } = ${{ steps.delete_repository.outputs.result }};
            console.log ( result );
            var message = 'Delete Repository status: \n';
            if ( '${{ steps.delete_repository.conclusion }}' == 'success') {
                
                message = message + result;
            }
            else {
                message = message + "failure. Please review the results and parameters requested. \n";
                message = message + result;
            };

            // Add result at Issue Comment 
            github.request(`POST /repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments`, {
              body: message
            });

            // Close issue 
            github.request(`PATCH /repos/${{ github.repository }}/issues/${{ github.event.issue.number }}`, {
              state: 'closed'
            });
